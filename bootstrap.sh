set -e

APP_DIR="/home/deploy/app"
BOT_SERVICE_NAME="bot1"
BOT_DIR="$APP_DIR/bots/$BOT_SERVICE_NAME"
ENV_FILE="$BOT_DIR/.env"

# üìù –í–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ ! -f "$ENV_FILE" ]; then
  echo
  echo "üìù –î–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞:"
  echo "   ‚Ä¢ Docker Hub username"
  echo "   ‚Ä¢ –ò–º—è Docker-–æ–±—Ä–∞–∑–∞ Telegram-–±–æ—Ç–∞"
  echo "   ‚Ä¢ Telegram Bot Token"
  echo "   ‚Ä¢ Telegram Bot Name"
  echo "   ‚Ä¢ GitHub Webhook Secret"
  echo
  echo "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –≤—Å—ë —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∞–≤—Ç–æ-–¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–ª –±–µ–∑ —Ä—É—á–Ω–æ–π –¥–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
  echo

  read -r -p "‚ùì –ì–æ—Ç–æ–≤ –≤–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å? (Y/n): " ready_now
  if [[ "$ready_now" =~ ^[Nn]$ ]]; then
    echo
    echo "‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ *–±–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env –∏ –∑–∞–ø—É—Å–∫–∞ webhook.service*."
    echo "   –¢—ã —Å–º–æ–∂–µ—à—å –≤—Ä—É—á–Ω—É—é:"
    echo "     ‚Ä¢ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª ${ENV_FILE}"
    echo "     ‚Ä¢ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å webhook/hooks.json"
    echo "     ‚Ä¢ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å webhook"
    echo
    echo "‚ÑπÔ∏è  –ò–ª–∏ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å bootstrap.sh –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤."
    echo

    read -r -p "‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? (y/N): " abort_now
    if [[ "$abort_now" =~ ^[Yy]$ ]]; then
      echo "üö™ –í—ã—Ö–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏ –∑–∞–ø—É—Å–∫ bootstrap.sh –ø–æ–∑–∂–µ."
      exit 0
    else
      echo "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–¥–µ–ø–ª–æ—è."
      SKIP_ENV_SETUP=true
    fi
  fi
fi

echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É..."
apt update && apt upgrade -y

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if ! command -v docker >/dev/null 2>&1; then
  echo "üê≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
  apt install -y ca-certificates curl gnupg lsb-release

  install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
    | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
    https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
    > /etc/apt/sources.list.d/docker.list

  apt update
  apt install -y docker-ce docker-ce-cli containerd.io
else
  echo "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if ! command -v docker-compose >/dev/null 2>&1; then
  echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose..."
  curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 \
    -o /usr/local/bin/docker-compose
  chmod +x /usr/local/bin/docker-compose
else
  echo "‚úÖ Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ docker
if ! getent group docker > /dev/null 2>&1; then
  echo "üë• –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É 'docker'..."
  groupadd docker
else
  echo "‚úÖ –ì—Ä—É–ø–ø–∞ 'docker' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è deploy
if id "deploy" >/dev/null 2>&1; then
  echo "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'deploy' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
  echo "üë§ –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'deploy'..."
  adduser deploy --disabled-password --gecos ""
  echo "‚ûï –î–æ–±–∞–≤–ª—è–µ–º deploy –≤ –≥—Ä—É–ø–ø—ã sudo –∏ docker..."
  usermod -aG sudo deploy
  usermod -aG docker deploy

  echo "üîê –ö–æ–ø–∏—Ä—É–µ–º SSH-–∫–ª—é—á–∏ –æ—Ç root..."
  mkdir -p /home/deploy/.ssh
  cp /root/.ssh/authorized_keys /home/deploy/.ssh/
  chown -R deploy:deploy /home/deploy/.ssh
  chmod 700 /home/deploy/.ssh
  chmod 600 /home/deploy/.ssh/authorized_keys
fi

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω –≤ –≥—Ä—É–ø–ø–µ docker
if id -nG deploy | grep -qw docker; then
  echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'deploy' —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ docker"
else
  echo "‚ûï –î–æ–±–∞–≤–ª—è–µ–º deploy –≤ –≥—Ä—É–ø–ø—É docker..."
  usermod -aG docker deploy
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–∏ –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if [ -d "$APP_DIR/.git" ]; then
  echo "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ $APP_DIR"
else
  echo "üîó –ì–æ—Ç–æ–≤ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –≤ $APP_DIR"
  read -r -p "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? (Y/n): " use_default_repo

  if [[ "$use_default_repo" =~ ^[Nn]$ ]]; then
    read -r -p "üåê –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: " custom_repo
    git clone "$custom_repo" "$APP_DIR"
  else
    DEFAULT_REPO="https://github.com/DmitriyLadutsko/telegram-bot-server-infra.git"
    echo "üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏–∑ $DEFAULT_REPO"
    su - deploy -c "git clone $DEFAULT_REPO $APP_DIR"
  fi

  chown -R deploy:deploy "$APP_DIR"
fi

if [[ "$SKIP_ENV_SETUP" != true ]]; then
  # üîó –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ bot-repo.json
  TEMPLATE_PATH="$APP_DIR/nginx/templates/bot-repo.json.tpl"
  OUTPUT_PATH="$APP_DIR/nginx/static/bot-repo.json"

  read -r -p "üîó –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Telegram-–±–æ—Ç–∞: " BOT_REPO
  mkdir -p "$(dirname "$OUTPUT_PATH")"

  if [ -n "$BOT_REPO" ]; then
    export BOT_REPO

    # üîΩ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏
    BOT_NAME_REPO=$(basename -s .git "$BOT_REPO")
    BOT_NAME_REPO=${BOT_NAME_REPO,,}  # –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    echo "üìõ –ò–º—è –±–æ—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏: $BOT_NAME_REPO"

    if [ -f "$TEMPLATE_PATH" ]; then
      echo "üõ† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º bot-repo.json –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
      su - deploy -c "BOT_REPO='$BOT_REPO' envsubst < $TEMPLATE_PATH > $OUTPUT_PATH"
    else
      echo "‚ö†Ô∏è –®–∞–±–ª–æ–Ω bot-repo.json.tpl –Ω–µ –Ω–∞–π–¥–µ–Ω: $TEMPLATE_PATH"
      echo "{\"repo\": \"$BOT_REPO\"}" > "$OUTPUT_PATH"
    fi
  else
    echo "{\"repo\": \"\"}" > "$OUTPUT_PATH"
    echo "‚ÑπÔ∏è bot-repo.json —Å–æ–∑–¥–∞–Ω, –Ω–æ —Å—Å—ã–ª–∫–∞ –ø—É—Å—Ç–∞ ‚Äî –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ"
  fi

  chown deploy:deploy "$OUTPUT_PATH"
  chmod 644 "$OUTPUT_PATH"
  echo "‚úÖ bot-repo.json –≥–æ—Ç–æ–≤: $OUTPUT_PATH"

  if [ ! -f "$ENV_FILE" ]; then
    echo "üìì –°–æ–∑–¥–∞—ë–º .env..."
    read -r -p "üîê Docker Hub username: " DOCKER_USERNAME
    read -r -p "üî¢ Docker image name (e.g. telegram-bot): " DOCKER_IMAGE_NAME
    DOCKER_IMAGE="$DOCKER_USERNAME/$DOCKER_IMAGE_NAME"
    read -r -p "ü§ñ Telegram Bot Token: " TELEGRAM_BOT_TOKEN
    read -r -p "ü§ñ Telegram Bot Name: " TELEGRAM_BOT_NAME

    echo "üñäÔ∏è –ó–∞–ø–∏—Å—å .env –≤ $ENV_FILE..."
    cat <<EOF > "$ENV_FILE"
DOCKER_USERNAME=$DOCKER_USERNAME
DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME
DOCKER_IMAGE=$DOCKER_IMAGE
TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN
TELEGRAM_BOT_NAME=$TELEGRAM_BOT_NAME
REPOSITORY_NAME=$BOT_NAME_REPO
EOF
    chown deploy:deploy "$ENV_FILE"
    chmod 600 "$ENV_FILE"
  else
    echo "üìì –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö..."
    # shellcheck source=$ENV_FILE
    source "$ENV_FILE"

    update_env_var() {
      local var_name="$1"
      local prompt="$2"
      local current_value="${!var_name}"
      echo
      echo "üîç $var_name: $current_value"
      read -r -p "$prompt (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å): " new_value
      if [[ -n "$new_value" ]]; then
        sed -i "/^$var_name=/d" "$ENV_FILE"
        echo "$var_name=$new_value" >> "$ENV_FILE"
      fi
    }

    update_env_var "DOCKER_USERNAME" "üîê Docker Hub username"
    update_env_var "DOCKER_IMAGE_NAME" "üî¢ Docker image name (e.g. telegram-bot)"
    update_env_var "DOCKER_IMAGE" "üì¶ Docker image (–∏–º—è —Å namespace)"
    update_env_var "TELEGRAM_BOT_TOKEN" "ü§ñ Telegram Bot Token"
    update_env_var "TELEGRAM_BOT_NAME" "ü§ñ Telegram Bot Name"
    update_env_var "REPOSITORY_NAME" "üîó Telegram bot GitHub repository name"
  fi
fi

# üìõ –ò–º—è –¥–æ–º–µ–Ω–∞
read -r -p "üåê –í–≤–µ–¥–∏ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: domain.com): " DOMAIN
DOMAIN=${DOMAIN,,} # –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

NGINX_TEMPLATE="$APP_DIR/nginx/templates/default.conf.tpl"
NGINX_CONF="$APP_DIR/nginx/default.conf"

if [ -f "$NGINX_TEMPLATE" ]; then
  echo "üõ† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º nginx config –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å –¥–æ–º–µ–Ω–æ–º: $DOMAIN"
  export DOMAIN
  su - deploy -c "DOMAIN='$DOMAIN' envsubst < $NGINX_TEMPLATE > $NGINX_CONF"
  sed -i 's|__DOLLAR__|$|g' "$NGINX_CONF"
  chown deploy:deploy "$NGINX_CONF"
  echo "‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $NGINX_CONF"
else
  echo "‚ö†Ô∏è –®–∞–±–ª–æ–Ω default.conf.tpl –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: $NGINX_TEMPLATE"
fi

read -r -p "‚ùì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å GitHub webhook listener —Å–µ–π—á–∞—Å? (y/N): " setup_webhook
if [[ "$setup_webhook" =~ ^[Yy]$ ]]; then
  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  if ! command -v webhook >/dev/null 2>&1; then
    echo "üì° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook..."
    apt install -y webhook
  else
    echo "‚úÖ webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  fi

  # üìÅ –ü—É—Ç–∏
  HOOKS_DIR="$APP_DIR/webhook"
  LOG_DIR="$APP_DIR/logs"

  mkdir -p "$LOG_DIR"
  chown -R deploy:deploy "$LOG_DIR"

  # üîê –°–µ–∫—Ä–µ—Ç
  read -r -p "üîê –í–≤–µ–¥–∏ GitHub webhook —Å–µ–∫—Ä–µ—Ç: " input_secret
  export WEBHOOK_SECRET="$input_secret"

  echo "üõ† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º hooks.json –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
  su - deploy -c "WEBHOOK_SECRET='$WEBHOOK_SECRET' APP_DIR='$APP_DIR' envsubst < $HOOKS_DIR/hooks.json.tpl > $HOOKS_DIR/hooks.json"

  # systemd unit
  echo "üì¶ –°–æ–∑–¥–∞—ë–º systemd unit –¥–ª—è webhook..."
  cat <<EOF | tee /etc/systemd/system/webhook.service > /dev/null
[Unit]
Description=Webhook Listener
After=network.target

[Service]
Type=simple
User=deploy
WorkingDirectory=$HOOKS_DIR
EnvironmentFile=$ENV_FILE
ExecStart=/usr/bin/webhook -hooks $HOOKS_DIR/hooks.json -port 9000 -verbose
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reexec
  systemctl daemon-reload
  systemctl enable webhook
  systemctl restart webhook

  echo "‚úÖ Webhook listener –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!"
else
  echo "‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –æ—Ç–ª–æ–∂–µ–Ω–∞. –¢—ã –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å setup –ø–æ–∑–∂–µ –≤—Ä—É—á–Ω—É—é."
fi

# –û—Ç–∫–ª—é—á–∏—Ç—å root-–¥–æ—Å—Ç—É–ø (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
read -r -p "‚ùì –û—Ç–∫–ª—é—á–∏—Ç—å root-–¥–æ—Å—Ç—É–ø –ø–æ SSH? (y/N): " disable_root
if [[ "$disable_root" =~ ^[Yy]$ ]]; then
  sed -i 's/^#*PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
  systemctl restart ssh
  echo "üîí Root-–¥–æ—Å—Ç—É–ø –ø–æ SSH –æ—Ç–∫–ª—é—á—ë–Ω."
else
  echo "‚ö†Ô∏è Root-–¥–æ—Å—Ç—É–ø –æ—Å—Ç–∞–ª—Å—è –≤–∫–ª—é—á—ë–Ω."
fi

echo "üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Docker volume mount..."
touch "$BOT_DIR/VERSION"
touch "$BOT_DIR/status.json"
touch "$LOG_DIR/deploy.log"

chown deploy:deploy "$BOT_DIR/VERSION"
chown deploy:deploy "$BOT_DIR/status.json"
chown deploy:deploy "$LOG_DIR/deploy.log"

echo "‚úÖ VERSION, status.json –∏ deploy.log –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"

echo "üéâ –ì–æ—Ç–æ–≤–æ! –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–π–¥–∏ –≤ SSH –∫–∞–∫ deploy."
