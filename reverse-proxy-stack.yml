version: '3.8'

services:
  reverse-proxy:
    # The official v3 Traefik docker image
    image: traefik:v3.3
    # Enables the web UI and tells Traefik to listen to docker
    environment:
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cloudflare_api_token
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.delaybeforecheck=0"
      - "--certificatesresolvers.cloudflare.acme.email=dima.ladut@gmail.com"
      - "--certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_letsencrypt:/letsencrypt
    secrets:
      - cloudflare_api_token
    networks:
        - botnet
    deploy:
      placement:
        constraints:
          - node.role == manager
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api.rule=Host(`traefik.${DOMAIN_NAME}`)"
        - "traefik.http.routers.api.entrypoints=websecure"
        - "traefik.http.routers.api.service=api@internal"
        - "traefik.http.routers.api.tls.certresolver=cloudflare"

        # üîÅ Middleware –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        - "traefik.http.routers.http-catch.rule=HostRegexp(`{host:.+}`)"
        - "traefik.http.routers.http-catch.entrypoints=web"
        - "traefik.http.routers.http-catch.middlewares=redirect-to-https"
        - "traefik.http.routers.http-catch.priority=1"
        - "traefik.http.routers.http-catch.service=dummy"
        - "traefik.http.services.dummy.loadbalancer.server.port=9999"

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    networks:
      - botnet
    deploy:
        placement:
            constraints:
            - node.role == manager
        replicas: 1
        restart_policy:
            condition: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN_NAME}`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=cloudflare"

networks:
  traefik:
    external: true

volumes:
  traefik_letsencrypt:

secrets:
  cloudflare_api_token:
    external: true
