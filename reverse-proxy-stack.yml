version: '3.8'

services:
  traefik:
    image: traefik:v3.3
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host

      # traefik ui
      - '8080:8080'

    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-public-certificates:/certificates
      - ./logs/traefik:/var/log/traefik
    secrets:
      - cloudflare_api_token
    environment:
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cloudflare_api_token

    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public

        # Redirect HTTP to HTTPS
#        - traefik.http.routers.traefik-public-http.rule=Host(`traefik.${DOMAIN_NAME?Variable not set}`)
#        - traefik.http.routers.traefik-public-http.entrypoints=http
#        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

        # HTTPS Traefik Dashboard with auth
        - traefik.http.routers.traefik-public-https.rule=Host(`traefik.${DOMAIN_NAME?Variable not set}`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.service=api@internal
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
#        - traefik.http.routers.traefik-public-https.middlewares=admin-auth

        - traefik.http.services.traefik-public.loadbalancer.server.port=8080

        # Basic auth middleware
#        - traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_ADMIN_USER}:${TRAEFIK_HASHED_PASSWORD}

      update_config:
        order: stop-first

    command:
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      - --providers.swarm.exposedbydefault=false
      - --providers.swarm.network=traefik-public
      - --providers.swarm.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --certificatesresolvers.le.acme.dnschallenge=true
      - --certificatesresolvers.le.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.email=${EMAIL?Variable not set}
      - --accesslog.bufferingsize=100
      - --accesslog.filepath=/var/log/traefik/traefik-access.log
      - --log
      - --api
      - --api.insecure=true

      # SMDM entrypoints additional services
#      - --entrypoints.traefik-ui.address=:9004

      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addRoutersLabels=true

    networks:
      - traefik-public

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    networks:
      - traefik-public
    deploy:
      placement:
        constraints:
          - node.role == manager
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.constraint-label=traefik-public"

        - "traefik.http.routers.whoami-https.rule=Host(`whoami.${DOMAIN_NAME}`)"

        - "traefik.http.routers.whoami-https.entrypoints=https"
        - "traefik.http.routers.whoami-https.tls.certresolver=le"
        - "traefik.http.services.whoami-https.loadbalancer.server.port=80"

networks:
  traefik-public:
    external: true

volumes:
  traefik-public-certificates:

secrets:
  cloudflare_api_token:
    external: true
